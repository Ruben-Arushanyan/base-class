"use strict";(self.webpackChunkbase_classes_website=self.webpackChunkbase_classes_website||[]).push([[875],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>b});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},s=Object.keys(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var i=a.createContext({}),c=function(e){var t=a.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},u=function(e){var t=c(e.components);return a.createElement(i.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,s=e.originalType,i=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),m=c(n),b=r,d=m["".concat(i,".").concat(b)]||m[b]||p[b]||s;return n?a.createElement(d,l(l({ref:t},u),{},{components:n})):a.createElement(d,l({ref:t},u))}));function b(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var s=n.length,l=new Array(s);l[0]=m;var o={};for(var i in t)hasOwnProperty.call(t,i)&&(o[i]=t[i]);o.originalType=e,o.mdxType="string"==typeof e?e:r,l[1]=o;for(var c=2;c<s;c++)l[c]=n[c];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},5073:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>i,contentTitle:()=>l,default:()=>p,frontMatter:()=>s,metadata:()=>o,toc:()=>c});var a=n(7462),r=(n(7294),n(3905));const s={sidebar_position:1,description:"The Store is a base class that provides the necessary methods and attributes to organize state management efficiently and easily."},l="Store",o={unversionedId:"store/index",id:"store/index",title:"Store",description:"The Store is a base class that provides the necessary methods and attributes to organize state management efficiently and easily.",source:"@site/docs/store/index.md",sourceDirName:"store",slug:"/store/",permalink:"/docs/store/",draft:!1,editUrl:"https://github.com/Ruben-Arushanyan/base-classes/edit/master/website/docs/store/index.md",tags:[],version:"current",lastUpdatedBy:"Ruben Arushanyan",sidebarPosition:1,frontMatter:{sidebar_position:1,description:"The Store is a base class that provides the necessary methods and attributes to organize state management efficiently and easily."},sidebar:"tutorialSidebar",previous:{title:"Introduction",permalink:"/docs/introduction"}},i={},c=[{value:"Import",id:"import",level:2},{value:"Basic Usage",id:"basic-usage",level:2},{value:"API",id:"api",level:2},{value:"<strong>constructor</strong>",id:"constructor",level:3},{value:"<strong>state</strong>",id:"state",level:3},{value:"<strong>updateState</strong>",id:"updatestate",level:3},{value:"<strong>subscribe</strong>",id:"subscribe",level:3},{value:"<strong>subscribeSelector</strong>",id:"subscribeselector",level:3},{value:"<strong>prevState</strong>",id:"prevstate",level:3}],u={toc:c};function p(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"store"},"Store"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"Store")," is a base class that provides the necessary methods and attributes to organize state management efficiently and easily."),(0,r.kt)("h2",{id:"import"},"Import"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"import {Store} from 'base-classes'\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const {Store} = require('base-classes')\n")),(0,r.kt)("h2",{id:"basic-usage"},"Basic Usage"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"import {Store} from 'base-classes'\n\nclass MyClass extends Store {\n    state = { count: 1 }\n}\n\nconst myClass = new MyClass()\n\nmyClass.subscribe((state, prevState) => {\n    console.log('state changed:', state)\n})\nmyClass.updateState((state) => {\n    return {...state, count: 2}\n})\n")),(0,r.kt)("h2",{id:"api"},"API"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#constructor"},"constructor")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#state"},"state")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#updatestate"},"updateState")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#subscribe"},"subscribe")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#subscribeselector"},"subscribeSelector")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#prevstate"},"prevState"))),(0,r.kt)("h3",{id:"constructor"},(0,r.kt)("strong",{parentName:"h3"},"constructor")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"new Store(initialState?)")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"initialState")," ",(0,r.kt)("inlineCode",{parentName:"li"},"<any>"),(0,r.kt)("br",{parentName:"li"}),"Any value for the initial state of the store.",(0,r.kt)("br",{parentName:"li"}),"Default: ",(0,r.kt)("inlineCode",{parentName:"li"},"undefined"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const initialState = {count: 1}\n\nconst store = new Store(initialState)\n")),(0,r.kt)("br",null),(0,r.kt)("h3",{id:"state"},(0,r.kt)("strong",{parentName:"h3"},"state")),(0,r.kt)("p",null,"Get the current state of the store.",(0,r.kt)("br",{parentName:"p"}),"\n",(0,r.kt)("inlineCode",{parentName:"p"},"store.state")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const store = new Store({count: 1})\n\n// Get the current state \nstore.state // {count: 1}\n\n")),(0,r.kt)("br",null),(0,r.kt)("h3",{id:"updatestate"},(0,r.kt)("strong",{parentName:"h3"},"updateState")),(0,r.kt)("p",null,"Change state value.",(0,r.kt)("br",{parentName:"p"}),"\n",(0,r.kt)("inlineCode",{parentName:"p"},"store.updateState(updater)")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"updater")," ",(0,r.kt)("inlineCode",{parentName:"li"},"<Function>"),(0,r.kt)("br",{parentName:"li"}),"Updater is a function that receives the current state as an argument, and the returned value will be the new state of the store.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const store = new Store({count: 1})\n\n// Update state\nstore.updateState(state => {\n    return {...state, count: state.count + 1}\n})\n\nstore.state // {count: 2}\n")),(0,r.kt)("br",null),(0,r.kt)("h3",{id:"subscribe"},(0,r.kt)("strong",{parentName:"h3"},"subscribe")),(0,r.kt)("p",null,"Subscribe state changes.",(0,r.kt)("br",{parentName:"p"}),"\n",(0,r.kt)("inlineCode",{parentName:"p"},"store.subscribe(callback)"),"  "),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"callback")," ",(0,r.kt)("inlineCode",{parentName:"li"},"<Function>"),(0,r.kt)("br",{parentName:"li"}),"A callback is a function that will be called when the state changes\u2024 It gets the new state in the first argument and the previous state in the second argument\u2024")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"store.subscribe((state, prevState) => {\n    console.log('state changed:', state)\n})\n")),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"Return value:"),(0,r.kt)("br",{parentName:"p"}),"\n","The subscribe method returns a function to unsubscribe the passed callback from listening to state changes."),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"const unsubscribe = store.subscibe(callback)")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const unsubscribe = store.subscribe((state, prevState) => {\n    console.log('state changed:', state)\n})\n\n// unsubscribe after 10 seconds\nsetTimeout(() => {\n    unsubscribe()\n}, 10000)\n")),(0,r.kt)("br",null),(0,r.kt)("h3",{id:"subscribeselector"},(0,r.kt)("strong",{parentName:"h3"},"subscribeSelector")),(0,r.kt)("p",null,"Subscribe certain values change which is defined by the selector\u2024",(0,r.kt)("br",{parentName:"p"}),"\n",(0,r.kt)("inlineCode",{parentName:"p"},"store.subscribeSelector(selector, callback)")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"selector")," ",(0,r.kt)("inlineCode",{parentName:"li"},"<Function>"),(0,r.kt)("br",{parentName:"li"}),"The selector is a function that receives state as a first argument and returns a certain selected value."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"callback")," ",(0,r.kt)("inlineCode",{parentName:"li"},"<Function>"),(0,r.kt)("br",{parentName:"li"}),"A callback is a function that will be called when the selected value changes\u2024 It gets the new value in the first argument and the previous value in the second argument\u2024")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const store = new Store({firstName: 'Ruben', lastName: 'Arushanyan'})\n\nstore.subscribeSelector(state => state.firstName, (value, prevValue) => {\n    console.log('firstName changed:', value)\n})\n")),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"Return value:"),(0,r.kt)("br",{parentName:"p"}),"\n","The subscribeSelector method returns a function to unsubscribe the passed callback from listening to selected value changes."),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"const unsubscribe = store.subscribeSelector(selector, callback)")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const store = new Store({firstName: 'Ruben', lastName: 'Arushanyan'})\n\nconst unsubscribe = store.subscribeSelector(state => state.firstName, (value, prevValue) => {\n    console.log('firstName changed:', value)\n})\n\n// unsubscribe after 10 seconds\nsetTimeout(() => {\n    unsubscribe()\n}, 10000)\n")),(0,r.kt)("br",null),(0,r.kt)("h3",{id:"prevstate"},(0,r.kt)("strong",{parentName:"h3"},"prevState")),(0,r.kt)("p",null,"Get the previous state of the store.",(0,r.kt)("br",{parentName:"p"}),"\n",(0,r.kt)("inlineCode",{parentName:"p"},"store.prevState")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const store = new Store({count: 1})\n\nstore.updateState(state => {\n    return {...state, count: 2}\n})\n// Get the current state \nstore.state // {count: 2}\n\n// Get the previous state \nstore.prevState // {count: 1}\n\n")))}p.isMDXComponent=!0}}]);